networks:
  app-network:
    driver: bridge

x-logging: &default-logging
  driver: json-file
  options:
    max-size: '10m'
    max-file: '10'

services:
  # Frontend (React + NGINX) for local - commented out for Nx local dev
  # client-mx:
  #   build:
  #     context: .
  #     dockerfile: apps/client-mx/Dockerfile
  #   depends_on:
  #     - server-nest
  #   ports:
  #     - '8082:80'
  #   volumes:
  #     - ./dev/nginx-local.conf:/etc/nginx/conf.d/default.conf:ro
  #   env_file:
  #     - .env
  #   environment:
  #     # Ensure nginx proxies to server-nest by service name on the internal network
  #     SERVER_NEST_HOST: server-nest
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   logging: *default-logging
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost/']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # API Service (NestJS) - commented out for Nx local dev
  # server-nest:
  #   build:
  #     context: .
  #     dockerfile: apps/server-nest/Dockerfile
  #   env_file:
  #     - .env
  #   environment:
  #     SERVICE_NAME: server-nest
  #     NX_PUBLIC_AUTH_SERVICE_HOST: auth-service
  #     NX_PUBLIC_REDIS_HOST: demo_t3_redis
  #   depends_on:
  #     - demo_t3_redis
  #     - auth-service
  #   ports:
  #     - '8083:${NX_PUBLIC_SERVER_NEST_PORT:-8083}'
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   logging: *default-logging
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'curl',
  #         '-f',
  #         'http://localhost:${NX_PUBLIC_SERVER_NEST_PORT:-8083}/api/health-check',
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # Auth Service (NestJS + Prisma) - commented out for Nx local dev
  # auth-service:
  #   build:
  #     context: .
  #     dockerfile: apps/auth-service/Dockerfile
  #     args:
  #       NX_PUBLIC_AUTH_SERVICE_PORT: ${NX_PUBLIC_AUTH_SERVICE_PORT:-8084}
  #   env_file:
  #     - .env
  #   environment:
  #     SERVICE_NAME: auth-service
  #     NX_PUBLIC_AUTH_DB_POSTGRES_HOST: postgres
  #     NX_PUBLIC_REDIS_HOST: demo_t3_redis
  #   depends_on:
  #     - postgres
  #   ports:
  #     - '8084:${NX_PUBLIC_AUTH_SERVICE_PORT:-8084}'
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   logging: *default-logging
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'curl',
  #         '-f',
  #         'http://localhost:${NX_PUBLIC_AUTH_SERVICE_PORT:-8084}/api/health-check',
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # Auth Service Database
  postgres:
    container_name: auth_postgres
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${NX_PUBLIC_AUTH_DB_POSTGRES_DB}
      POSTGRES_USER: ${NX_PUBLIC_AUTH_DB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${NX_PUBLIC_AUTH_DB_POSTGRES_PASSWORD}
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    ports:
      - '${NX_PUBLIC_AUTH_DB_POSTGRES_PORT}:5432'
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${NX_PUBLIC_AUTH_DB_POSTGRES_USER} -d ${NX_PUBLIC_AUTH_DB_POSTGRES_DB}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis (shared)
  demo_t3_redis:
    container_name: demo_t3_redis
    image: redis:8-alpine
    ports:
      - '${NX_PUBLIC_REDIS_PORT}:6379'
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # === MONITORING STACK ===
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - '${NX_PUBLIC_PROMETHEUS_PORT}:9090'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - '${NX_PUBLIC_GRAFANA_PORT}:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${NX_PUBLIC_GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - prometheus

volumes:
  auth_postgres_data:
  products_postgres_data:
  prometheus_data:
  grafana_data:
