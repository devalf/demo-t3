name: E2E Tests

on:
  # I decided not to include this workflow in a regular branch push since this execution is too heavy | e2e-job
  # workflow_run:
  #   workflows: ['CI Setup and Quality Checks']
  #   types: [completed]
  #   branches: [master, dev]
  workflow_dispatch:

concurrency:
  group: e2e-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    # probably later I will enable it again | e2e-job
    # if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn config set network-timeout 600000 -g
          yarn install --frozen-lockfile --ignore-engines

      - name: Prepare env file for tests
        run: |
          cp .env.example .env

      - name: Build base image (demo-base)
        run: |
          DOCKER_BUILDKIT=0 docker build -t demo-base:latest -f Dockerfile.base .
          docker images | grep demo-base || true

      - name: Build e2e images
        run: |
          export DOCKER_BUILDKIT=0
          export COMPOSE_DOCKER_CLI_BUILD=0
          docker compose -f docker-compose.e2e.yml --env-file .env build --progress=plain

      - name: Start e2e stack
        run: |
          export DOCKER_BUILDKIT=0
          export COMPOSE_DOCKER_CLI_BUILD=0
          docker compose -f docker-compose.e2e.yml --env-file .env up -d

      - name: Wait for services to be healthy
        run: |
          set -e
          # Load env vars from .env for host-side checks
          if [ -f .env ]; then
            set -a
            . ./.env
            set +a
          else
            echo ".env not found; proceeding with default env values for health checks."
          fi

          echo "Waiting for Postgres health..."
          for i in {1..60}; do
            if docker inspect -f '{{json .State.Health.Status}}' $(docker compose -f docker-compose.e2e.yml ps -q postgres) | grep -q 'healthy'; then
              echo "Postgres healthy"; break; fi; sleep 2; done

          echo "Waiting for Redis health..."
          for i in {1..60}; do
            if docker inspect -f '{{json .State.Health.Status}}' $(docker compose -f docker-compose.e2e.yml ps -q demo_t3_redis) | grep -q 'healthy'; then
              echo "Redis healthy"; break; fi; sleep 2; done

          echo "Waiting for RabbitMQ health..."
          for i in {1..60}; do
            if docker inspect -f '{{json .State.Health.Status}}' $(docker compose -f docker-compose.e2e.yml ps -q demo_t3_rabbitmq_e2e) | grep -q 'healthy'; then
              echo "RabbitMQ healthy"; break; fi; sleep 2; done

          echo "Waiting for auth-service health endpoint..."
          for i in {1..120}; do
            if curl -fsS "http://localhost:${NX_PUBLIC_AUTH_SERVICE_PORT}/api/health-check" >/dev/null; then echo ok; break; fi; sleep 2; done

          echo "Waiting for server-nest health endpoint..."
          for i in {1..120}; do
            if curl -fsS "http://localhost:${NX_PUBLIC_SERVER_NEST_PORT}/api/health-check" >/dev/null; then echo ok; break; fi; sleep 2; done

          echo "Waiting for client-mx to be reachable..."
          for i in {1..60}; do
            if curl -fsS "http://localhost:${NX_PUBLIC_CLIENT_MX_PORT}/" >/dev/null; then echo ok; break; fi; sleep 2; done

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests (nx)
        run: |
          # Ensure .env is loaded for processes spawned by yarn
          if [ -f .env ]; then
            set -a
            . ./.env
            set +a
          fi
          # Run without --parallel to avoid hanging in CI
          yarn nx run-many --all --target=e2e

      - name: Show container logs on failure
        if: failure()
        run: |
          docker compose -f docker-compose.e2e.yml logs --no-color --tail=200

      - name: Extra diagnostics on failure
        if: failure()
        run: |
          echo "==== Docker info ===="
          docker info
          echo "==== Compose config (resolved) ===="
          docker compose -f docker-compose.e2e.yml --env-file .env config
          echo "==== Images (top 50) ===="
          docker images | head -n 50

      - name: Tear down e2e stack
        if: always()
        run: |
          # Load env vars for teardown
          if [ -f .env ]; then
            set -a
            . ./.env
            set +a
            echo "Using .env file for teardown"
            docker compose -f docker-compose.e2e.yml --env-file .env down -v
          else
            echo ".env not found; tearing down stack without env overrides."
            docker compose -f docker-compose.e2e.yml down -v
          fi
