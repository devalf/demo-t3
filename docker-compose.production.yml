networks:
  app-network:
    driver: bridge

x-logging: &default-logging
  driver: json-file
  options:
    max-size: '10m'
    max-file: '72'

services:
  # Frontend (React + NGINX) - Only service with external access
  client-mx:
    build:
      context: .
      dockerfile: apps/client-mx/Dockerfile
    depends_on:
      - server-nest
    ports:
      - '80:80' # Standard HTTP port
      - '443:443' # Standard HTTPS port
    volumes:
      - /opt/demo-t3-shared/letsencrypt:/etc/letsencrypt:ro
      - /opt/demo-t3-shared/www-certbot:/var/www/certbot:ro
    env_file:
      - .env.production
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Service (NestJS) - Internal only, no external ports
  server-nest:
    build:
      context: .
      dockerfile: apps/server-nest/Dockerfile
    # No external ports - only accessible via nginx proxy
    depends_on:
      - redis
      - auth-service
    env_file:
      - .env.production
    environment:
      SERVICE_NAME: server-nest
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          'http://localhost:${NX_PUBLIC_SERVER_NEST_PORT:-8083}/api/health-check',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service (NestJS + Prisma) - Internal only, no external ports
  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
      args:
        NX_PUBLIC_AUTH_SERVICE_PORT: ${NX_PUBLIC_AUTH_SERVICE_PORT:-8084}
    # No external ports - internal service only
    depends_on:
      - postgres
    env_file:
      - .env.production
    environment:
      SERVICE_NAME: auth-service
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          'http://localhost:${NX_PUBLIC_AUTH_SERVICE_PORT:-8084}/api/health-check',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${NX_PUBLIC_AUTH_DB_POSTGRES_DB}
      POSTGRES_USER: ${NX_PUBLIC_AUTH_DB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${NX_PUBLIC_AUTH_DB_POSTGRES_PASSWORD}
    ports:
      - '127.0.0.1:15432:5432'
    volumes:
      - /opt/demo-t3-shared/postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${NX_PUBLIC_AUTH_DB_POSTGRES_USER} -d ${NX_PUBLIC_AUTH_DB_POSTGRES_DB}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:8-alpine
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # === MONITORING STACK ===
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    # Prometheus runs as nobody (uid 65534) in the official image. Set user explicitly
    # so writes to the mounted volume work consistently across deployments.
    user: '65534:65534'
    ports:
      - '127.0.0.1:${NX_PUBLIC_PROMETHEUS_PORT}:9090'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - /opt/demo-t3-shared/prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    # Grafana runs as uid 472 by default. Set user explicitly for consistent file ownership.
    user: '472:472'
    ports:
      - '127.0.0.1:${NX_PUBLIC_GRAFANA_PORT}:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${NX_PUBLIC_GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - /opt/demo-t3-shared/grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - prometheus

  # # AlertManager - Alert notifications
  # alertmanager:
  #   image: prom/alertmanager:latest
  #   ports:
  #     - '127.0.0.1:${NX_PUBLIC_ALERTMANAGER_PORT:-9093}:9093'
  #   volumes:
  #     - ./monitoring/alertmanager:/etc/alertmanager
  #   command:
  #     - '--config.file=/etc/alertmanager/alertmanager.yml'
  #     - '--storage.path=/alertmanager'
  #     - '--web.external-url=http://localhost:${NX_PUBLIC_ALERTMANAGER_PORT:-9093}'
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # Loki - Log aggregation (production)
  loki:
    image: grafana/loki:3.5.3
    # Loki runs as uid 10001 by default. Set user explicitly so it can write to /loki.
    user: '10001:10001'
    command: ['-config.file=/etc/loki/config.yaml', '-config.expand-env=true']
    volumes:
      - ./monitoring/loki:/etc/loki
      - /opt/demo-t3-shared/loki-data:/loki
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging

  # Promtail - Log collection agent
  promtail:
    image: grafana/promtail:3.5.3
    command: ['-config.file=/etc/promtail/config.yaml']
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /opt/demo-t3-shared/promtail-data:/data
    networks:
      - app-network
    restart: unless-stopped
    logging: *default-logging
    depends_on:
      - loki

  # # Node Exporter - System metrics
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   ports:
  #     - "9100:9100"
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # # cAdvisor - Container metrics
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   privileged: true
  #   devices:
  #     - /dev/kmsg:/dev/kmsg
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # # PostgreSQL Exporter - Database metrics
  # postgres-exporter:
  #   image: prometheuscommunity/postgres-exporter:latest
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://${NX_PUBLIC_AUTH_DB_POSTGRES_USER}:${NX_PUBLIC_AUTH_DB_POSTGRES_PASSWORD}@postgres:5432/${NX_PUBLIC_AUTH_DB_POSTGRES_DB}?sslmode=disable"
  #   ports:
  #     - "9187:9187"
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres

  # # Redis Exporter - Redis metrics
  # redis-exporter:
  #   image: oliver006/redis_exporter:latest
  #   environment:
  #     REDIS_ADDR: "redis://redis:6379"
  #   ports:
  #     - "9121:9121"
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   depends_on:
  #     - redis

  # # NGINX Exporter - NGINX metrics
  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:latest
  #   command:
  #     - '-nginx.scrape-uri=http://client-mx:80/nginx_status'
  #   ports:
  #     - "9113:9113"
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  #   depends_on:
  #     - client-mx
